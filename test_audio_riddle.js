// Test pour v√©rifier l'envoi de devinette avec audio
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// Configuration
const API_URL = 'http://localhost:5000'; // Port mis √† jour
const RECIPIENT_LINK = '@Charles'; // Remplacez par un lien de destinataire valide

// Fonction de test
async function testAudioRiddle() {
  try {
    console.log('=== TEST D\'ENVOI DE MESSAGE AVEC AUDIO ET DEVINETTE ===');
    
    // Cr√©er un fichier audio de test s'il n'existe pas d√©j√†
    const testAudioPath = path.join(__dirname, 'test_audio.webm');
    if (!fs.existsSync(testAudioPath)) {
      console.log('Cr√©ation d\'un fichier audio de test...');
      // Cr√©er un fichier binaire vide de 1KB
      const buffer = Buffer.alloc(1024);
      fs.writeFileSync(testAudioPath, buffer);
      console.log('Fichier audio de test cr√©√©');
    }
    
    // Cr√©er un FormData
    const formData = new FormData();
    
    // Ajouter les donn√©es de base
    formData.append('recipientLink', RECIPIENT_LINK);
    formData.append('content', 'Ceci est un message de test avec audio et devinette');
    formData.append('emotionalFilter', 'joie');
    
    // Ajouter les informations cach√©es
    formData.append('nickname', 'Testeur');
    formData.append('hint', 'Indice de test');
    formData.append('emoji', 'üß™');
    
    // Ajouter la devinette
    console.log('Ajout de la devinette au FormData - TEST');
    const riddleQuestion = 'Quelle est la couleur du cheval blanc d\'Henri IV?';
    const riddleAnswer = 'blanc';
    
    // Ajouter les champs s√©par√©ment
    formData.append('riddleQuestion', riddleQuestion);
    formData.append('riddleAnswer', riddleAnswer);
    
    // Ajouter aussi en tant qu'objet JSON stringifi√©
    const riddle = {
      question: riddleQuestion,
      answer: riddleAnswer
    };
    formData.append('riddle', JSON.stringify(riddle));
    
    // Logs d√©taill√©s pour d√©boguer
    console.log('Devinette - Question:', riddleQuestion);
    console.log('Devinette - R√©ponse:', riddleAnswer);
    console.log('Devinette - JSON:', JSON.stringify(riddle));
    
    // Ajouter le message vocal
    formData.append('voiceMessage', fs.createReadStream(testAudioPath));
    formData.append('voiceFilter', 'normal');
    
    console.log('Envoi de la requ√™te...');
    
    // Envoyer la requ√™te
    const response = await axios.post(`${API_URL}/api/messages/send`, formData, {
      headers: {
        ...formData.getHeaders()
      }
    });
    
    console.log('R√©ponse re√ßue:', response.data);
    
    // V√©rifier si la devinette a √©t√© correctement trait√©e
    if (response.data.details && response.data.details.hasRiddle) {
      console.log('‚úÖ TEST R√âUSSI: La devinette a √©t√© correctement trait√©e!');
    } else {
      console.log('‚ùå TEST √âCHOU√â: La devinette n\'a pas √©t√© correctement trait√©e.');
    }
    
    // R√©cup√©rer le message cr√©√© pour v√©rifier que la devinette est bien enregistr√©e
    if (response.data.messageId) {
      try {
        console.log('V√©rification du message enregistr√©...');
        
        // Cette partie n√©cessiterait une authentification, donc on simule juste la v√©rification
        console.log('Pour v√©rifier compl√®tement, vous devriez r√©cup√©rer le message depuis la base de donn√©es');
        console.log('et v√©rifier que message.clues.riddle contient bien la question et la r√©ponse.');
      } catch (error) {
        console.error('Erreur lors de la v√©rification du message:', error);
      }
    }
    
    return response.data;
  } catch (error) {
    console.error('Erreur lors du test:', error.message);
    if (error.response) {
      console.error('D√©tails de l\'erreur:', error.response.data);
    }
    throw error;
  }
}

// Ex√©cuter le test
testAudioRiddle()
  .then(() => {
    console.log('Test termin√©');
  })
  .catch((error) => {
    console.error('Test √©chou√©:', error);
  }); 