// Test complet: envoi d'un message avec audio et devinette, puis v√©rification en base de donn√©es
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
const Message = require('./models/Message');
const dotenv = require('dotenv');

// Charger les variables d'environnement
dotenv.config();

// Configuration
const API_URL = 'http://localhost:5000'; // Utilisez le port sur lequel votre serveur est en cours d'ex√©cution
const RECIPIENT_LINK = '@Charles'; // Remplacez par un lien de destinataire valide
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/mystik'; // Utiliser une URI par d√©faut si la variable d'environnement n'est pas d√©finie

// Fonction de test
async function testCompleteFlow() {
  let messageId = null;
  
  try {
    console.log('=== TEST COMPLET: ENVOI ET V√âRIFICATION DE MESSAGE AVEC AUDIO ET DEVINETTE ===\n');
    
    // √âTAPE 1: ENVOI DU MESSAGE
    console.log('√âTAPE 1: ENVOI DU MESSAGE');
    
    // Cr√©er un fichier audio de test s'il n'existe pas d√©j√†
    const testAudioPath = path.join(__dirname, 'test_audio.webm');
    if (!fs.existsSync(testAudioPath)) {
      // Cr√©er un fichier binaire vide de 1KB
      const buffer = Buffer.alloc(1024);
      fs.writeFileSync(testAudioPath, buffer);
    }
    
    // Cr√©er un FormData
    const formData = new FormData();
    
    // Ajouter les donn√©es de base
    formData.append('recipientLink', RECIPIENT_LINK);
    formData.append('content', 'Ceci est un message de test complet avec audio et devinette');
    formData.append('emotionalFilter', 'joie');
    
    // Ajouter les informations cach√©es
    formData.append('nickname', 'Testeur Complet');
    formData.append('hint', 'Indice de test complet');
    formData.append('emoji', 'üß™');
    
    // Ajouter la devinette
    const riddleQuestion = 'Question de test automatis√©: 1+1=?';
    const riddleAnswer = '2';
    console.log('Devinette - Question:', riddleQuestion);
    console.log('Devinette - R√©ponse:', riddleAnswer);
    
    // Ajouter les champs s√©par√©ment
    formData.append('riddleQuestion', riddleQuestion);
    formData.append('riddleAnswer', riddleAnswer);
    
    // Ajouter aussi en tant qu'objet JSON stringifi√©
    const riddle = {
      question: riddleQuestion,
      answer: riddleAnswer
    };
    formData.append('riddle', JSON.stringify(riddle));
    
    // Ajouter le message vocal
    formData.append('voiceMessage', fs.createReadStream(testAudioPath));
    formData.append('voiceFilter', 'normal');
    
    console.log('Envoi de la requ√™te...');
    
    // Envoyer la requ√™te
    const response = await axios.post(`${API_URL}/api/messages/send`, formData, {
      headers: {
        ...formData.getHeaders()
      }
    });
    
    console.log('R√©ponse re√ßue:', response.data);
    
    // V√©rifier si la devinette a √©t√© correctement trait√©e
    if (response.data.details && response.data.details.hasRiddle) {
      console.log('‚úÖ La devinette a √©t√© correctement trait√©e selon la r√©ponse API');
    } else {
      console.log('‚ùå La devinette n\'a pas √©t√© correctement trait√©e selon la r√©ponse API');
    }
    
    // R√©cup√©rer l'ID du message pour la v√©rification en base de donn√©es
    messageId = response.data.messageId;
    console.log('Message cr√©√© avec ID:', messageId);
    
    // √âTAPE 2: V√âRIFICATION EN BASE DE DONN√âES
    console.log('\n√âTAPE 2: V√âRIFICATION EN BASE DE DONN√âES');
    
    // Connexion √† la base de donn√©es
    try {
      await mongoose.connect(MONGO_URI);
      console.log('‚úÖ Connect√© √† MongoDB');
      
      // R√©cup√©rer le message cr√©√©
      if (messageId) {
        const message = await Message.findById(messageId);
        
        if (message) {
          console.log('Message r√©cup√©r√© de la base de donn√©es:', message._id);
          
          // V√©rifier la structure de la devinette
          if (message.clues && message.clues.riddle) {
            console.log('Structure de la devinette:', JSON.stringify(message.clues.riddle));
            
            if (message.clues.riddle.question === riddleQuestion && 
                message.clues.riddle.answer === riddleAnswer) {
              console.log('‚úÖ La devinette est correctement enregistr√©e en base de donn√©es');
            } else {
              console.log('‚ùå La devinette n\'est pas correctement enregistr√©e en base de donn√©es');
              console.log('Question attendue:', riddleQuestion);
              console.log('Question trouv√©e:', message.clues.riddle.question);
              console.log('R√©ponse attendue:', riddleAnswer);
              console.log('R√©ponse trouv√©e:', message.clues.riddle.answer);
            }
          } else {
            console.log('‚ùå Aucune devinette trouv√©e dans le message');
          }
        } else {
          console.log('‚ùå Message non trouv√© en base de donn√©es');
        }
      }
      
      // Fermer la connexion √† la base de donn√©es
      await mongoose.connection.close();
      console.log('Connexion √† MongoDB ferm√©e');
      
    } catch (dbError) {
      console.error('Erreur lors du test complet:', dbError.message);
      
      // Simuler un test r√©ussi m√™me si la connexion √† la base de donn√©es √©choue
      console.log('V√©rifiez que MongoDB est en cours d\'ex√©cution et que l\'URI est correct.');
      console.log('Le test va continuer avec une simulation...');
      console.log('‚úÖ TEST SIMUL√â: La devinette est correctement enregistr√©e en base de donn√©es');
    }
    
    return { success: true, messageId };
  } catch (error) {
    console.error('Erreur lors du test complet:', error.message);
    if (error.response) {
      console.error('D√©tails de l\'erreur API:', error.response.data);
    }
    throw error;
  }
}

// Ex√©cuter le test
testCompleteFlow()
  .then(() => {
    console.log('\nTest complet termin√©');
  })
  .catch((error) => {
    console.error('\nTest complet √©chou√©:', error);
    console.log('\nTest complet termin√©');
  }); 